name: Build & Deploy

on:
  push:
    branches: 
      - main

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout files
        uses: actions/checkout@v3
      - name: Check env
        run: echo $IMAGES_TAG
      - name: Build images
        run: |
          docker build -t focall/vtn_server:$(echo $GITHUB_SHA | head -c7) apps/server_and_backend/ 
          docker build -t focall/vtn_react_app:$(echo $GITHUB_SHA | head -c7) -f apps/react_app/Dockerfile.production apps/react_app/
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push Docker image to Docker Hub
        run: |
          docker push focall/vtn_server:$(echo $GITHUB_SHA | head -c7)
          docker push focall/vtn_react_app:$(echo $GITHUB_SHA | head -c7)

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_KNOWN_HOSTS }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            date >> timestamp.txt
            cd vote_the_news
            git pull https://github.com/FelipeKha/vote_the_news.git
            echo "IMAGES_TAG="$GITHUB_SHA | head -c18 > ~/vote_the_news/images_tag.env
            docker ps -aq | xargs docker stop | xargs docker rm
            docker images -a | xargs docker rmi
            docker compose -f docker-compose.production.yml --env-file images_tag.env up -d




# First attempt: build and push image to DigitalOcean Container Registry, and deploy to Droplet - failed at push due to quota exceeded
# env:
#   REGISTRY: "registry.digitalocean.com/felipedocr"
#   IMAGE_NAME: "vtn_image"

# jobs:
#   build_and_push:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout files
#         uses: actions/checkout@v3
#       - name: Build container image
#         run: docker compose build
#       - name: Install doctl
#         uses: digitalocean/action-doctl@v2
#         with:
#           token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
#       - name: Log in to DigitalOcean Container Registry with short-lived credentials
#         run: doctl registry login --expiry-seconds 600
#       - name: Remove old images
#         run: if [ ! -z "$doctl registry repository list | grep "$(echo $IMAGE_NAME)")"]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME) $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi
#       - name: Tag the image with the fully qualified destination path
#         run: docker tag vote_the_news-vtn-react-app registry.digitalocean.com/felipedocr/vote_the_news-vtn-react-app
#       - name: Push image to DigitalOcean Container Registry
#         run: docker push registry.digitalocean.com/felipedocr/vote_the_news-vtn-react-app
    
#   deploy:
#     runs-on: ubuntu-latest
#     needs: build_and_push
#     steps:
#       - name: Deploy to DigitalOCean droplet via SSH action
#         uses: appleboy/ssh-action@master
#         with: 
#           host: ${{ secrets.SSH_HOST }}
#           username: ${{ secrets.SSH_USERNAME }}
#           key:  ${{ secrets.SSH_KEY }}
#           passphrase: ${{ secrets.SSH_PASSPHRASE }}
#           envs: IMAGE_NAME,REGISTRY,{{ secrets.DIGITALOCEAN_ACCESS_TOKEN }},GITHUB_SHA
#           script: |
#             docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
#             docker stop $(echo $IMAGE_NAME)
#             docker rm $(echo $IMAGE_NAME)
#             docker run -d \
#             --restart always \
#             --name $(echo $IMAGE_NAME) \
#             $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo GITHUB_SHA | head -c7)

# Second attempt: build and push image to Docker Hub, and then deploy to Droplet
# jobs:
#   build_and_push:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout files
#         uses: actions/checkout@v3
#       - name: Build container image
#         run: docker compose build
#       - name: Tag the image with the fully qualified destination path
#         run: docker tag vote_the_news-vtn-react-app focall/vote_the_news
#       - name: Login to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}
#       # - name: Login to Docker Hub
#       #   run: docker login -u $(echo $DOCKERHUB_USERNAME) -p $(echo $DOCKERHUB_TOKEN)
#       - name: Push Docker image to Docker Hub
#         run: docker push focall/vote_the_news

#       # - name: Set up QEMU
#       #   uses: docker/setup-qemu-action@v2
#       # - name: Set up Docker Buildx
#       #   uses: docker/setup-buildx-action@v2
#       # - name: Login to Docker Hub
#       #   uses: docker/login-action@v2
#       #   with:
#       #     username: ${{ secrets.DOCKERHUB_USERNAME }}
#       #     password: ${{ secrets.DOCKERHUB_TOKEN }}
#       # - name: Build and push Docker images to Docker Hub
#       #   uses: docker/build-push-action@v3
#       #   with:
#       #     push: true
#       #     tags: focall/vote_the_news:latest

#   deploy:
#     needs: build_and_push
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout files
#         uses: actions/checkout@v3
#       - name: Get tag name
#         uses: olegtarasov/get-tag@v2
#       - name: Install doctl
#         uses: digitalocean/action-doctl@v2
#         with:
#           token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
#       - name: Provision Droplet and deploy container
#         run: doctl compute droplet

# Third attemps: connect to the droplet, and pull and build from there directly
# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout files
#         uses: actions/checkout@v3
      # - name: Deploy to DigitalOcean Droplet
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.SSH_HOST }}
      #     username: ${{ secrets.SSH_USERNAME }}
      #     key:  ${{ secrets.SSH_KEY }}
      #     script: |
      #       export NVM_DIR=~/.nvm
      #       source ~/.nvm/nvm.sh
      #       rm -rf vote_the_news
      #       mkdir vote_the_news
      #       cd vote_the_news
      #       git clone https://github.com/FelipeKha/vote_the_news.git
      #       echo 'Deployment to digital ocean finished'
      # - name: Install expect interpreter
      #   run: sudo apt-get install expect
      # - name: Connect to Droplet with ssh
      #   run: ./deploy_script.sh
      #   shell: bash

# New version of the 3rd attempt with Adrien

# name: Build & Deploy

# on:
#   push:
#     branches: 
#       - main

# jobs:
#   push_to_droplet:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#       - name: Create SSH key
#         run: |
#           mkdir -p ~/.ssh/
#           echo "$SSH_PRIVATE_KEY" > "$SSH_KEY_PATH"
#           sudo chmod 600 "$SSH_KEY_PATH"
#           echo "$SSH_KNOWN_HOST" > ~/.ssh/known_hosts
#         shell: bash
#         env:
#           SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
#           SSH_KNOWN_HOST: ${{secrets.SSH_KNOWN_HOSTS}}
#           SSH_KEY_PATH: ${{ github.workspace }}/../private.key
#       - name: Connect to Droplet, write timestamp, and close connection
#         run: |
#           ssh -i "$SSH_KEY_PATH" root@"$SSH_KNOWN_HOST"
#           date >> timestamp.txt
#           exit
#         shell: bash
#         env:
#           SSH_KNOWN_HOST: ${{secrets.SSH_KNOWN_HOSTS}}
#           SSH_KEY_PATH: ${{ github.workspace }}/../private.key